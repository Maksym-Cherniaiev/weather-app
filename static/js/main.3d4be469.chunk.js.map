{"version":3,"sources":["components/Header/index.js","components/Main/main components/City.js","components/Main/main components/Temp.js","components/Main/main components/Extra.js","api/geocode.js","api/geocodeApi.js","api/weatherApi.js","components/Main/render-weather-info.js","components/Main/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","type","placeholder","City","props","name","Temp","_ref","temp_c","temp_f","Extra","humidity","condition","pressure","Position","results","address_components","long_name","short_name","types","formatted_address","geometry","location","lat","lng","location_type","viewport","northeast","southwest","place_id","status","getLocationByCity","get","URL","apiKey","getWeatherByLocation","weatherData","axios","concat","then","data","_data$data$current","current","pressure_mb","temp","extra","text","catch","error","console","log","WeatherInfo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","getWeatherData","_this$state$weatherDa","Fragment","main_components_City","main_components_Temp","main_components_Extra","React","Component","Main","render_weather_info","Footer","href","App","components_Header","components_Main","components_Footer","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d4be469.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./index.sass\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"bar\">\r\n      <h1 className=\"bar_title\">WEATHER</h1>\r\n      <input className=\"bar_search\" type=\"text\" placeholder=\"Enter a city\"></input>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction City( props ) {\r\n  return (\r\n    <h2>{ props.name }</h2>\r\n  );\r\n}\r\n\r\nexport default City;","import React from \"react\";\r\n\r\nfunction Temp({temp_c, temp_f}) {\r\n  return (\r\n    <section className=\"temp\">\r\n      <span className=\"temp_current\">tempereture C: { temp_c }</span>\r\n      <span className=\"temp_feel\">tempereture F: { temp_f }</span>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Temp;","import React from \"react\";\r\n\r\nfunction Extra({humidity, condition, pressure}) {\r\n  return (\r\n    <section className=\"extra\">\r\n      <span className=\"extra_humidity\">humidity: { humidity }</span>\r\n      <span className=\"extra_visibility\">condition: { condition }</span>\r\n      <span className=\"extra_pressure\">pressure: { pressure }</span>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Extra;","const Position = {\r\n  \"results\" : [\r\n     {\r\n        \"address_components\" : [\r\n           {\r\n              \"long_name\" : \"1600\",\r\n              \"short_name\" : \"1600\",\r\n              \"types\" : [ \"street_number\" ]\r\n           },\r\n           {\r\n              \"long_name\" : \"Amphitheatre Pkwy\",\r\n              \"short_name\" : \"Amphitheatre Pkwy\",\r\n              \"types\" : [ \"route\" ]\r\n           },\r\n           {\r\n              \"long_name\" : \"Mountain View\",\r\n              \"short_name\" : \"Mountain View\",\r\n              \"types\" : [ \"locality\", \"political\" ]\r\n           },\r\n           {\r\n              \"long_name\" : \"Santa Clara County\",\r\n              \"short_name\" : \"Santa Clara County\",\r\n              \"types\" : [ \"administrative_area_level_2\", \"political\" ]\r\n           },\r\n           {\r\n              \"long_name\" : \"California\",\r\n              \"short_name\" : \"CA\",\r\n              \"types\" : [ \"administrative_area_level_1\", \"political\" ]\r\n           },\r\n           {\r\n              \"long_name\" : \"United States\",\r\n              \"short_name\" : \"US\",\r\n              \"types\" : [ \"country\", \"political\" ]\r\n           },\r\n           {\r\n              \"long_name\" : \"94043\",\r\n              \"short_name\" : \"94043\",\r\n              \"types\" : [ \"postal_code\" ]\r\n           }\r\n        ],\r\n        \"formatted_address\" : \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\r\n        \"geometry\" : {\r\n           \"location\" : {\r\n              \"lat\" : 49.74,\r\n              \"lng\" : 23.92\r\n           },\r\n           \"location_type\" : \"ROOFTOP\",\r\n           \"viewport\" : {\r\n              \"northeast\" : {\r\n                 \"lat\" : 37.4238253802915,\r\n                 \"lng\" : -122.0829009197085\r\n              },\r\n              \"southwest\" : {\r\n                 \"lat\" : 37.4211274197085,\r\n                 \"lng\" : -122.0855988802915\r\n              }\r\n           }\r\n        },\r\n        \"place_id\" : \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\r\n        \"types\" : [ \"street_address\" ]\r\n     }\r\n  ],\r\n  \"status\" : \"OK\"\r\n}\r\n\r\nexport default Position;","import get from \"lodash.get\";\r\nimport Position from \"./geocode\";\r\n\r\nfunction getLocationByCity() {\r\n  return get(Position, \"results[0].geometry.location\", null);\r\n}\r\n\r\nexport default getLocationByCity;","import axios from \"axios\";\r\n\r\nconst URL = \"https://api.apixu.com/v1/current.json\";\r\nconst apiKey = \"2d7ebdd87bcf48e9b7f184126192507\";\r\n\r\nfunction getWeatherByLocation(location) {\r\n  let weatherData = {};\r\n  return axios.get(`${URL}?key=${apiKey}&q=${location.lat},${location.lng}`)\r\n  .then(data => {\r\n    const {temp_c, temp_f, humidity, pressure_mb: pressure, condition} = data.data.current;\r\n    weatherData.location = data.data.location.name;\r\n    weatherData.temp = {\r\n      temp_c,\r\n      temp_f\r\n    };\r\n    weatherData.extra = {\r\n      humidity,\r\n      pressure,\r\n      condition: condition.text\r\n    }\r\n    return weatherData;\r\n  })\r\n  .catch(error => console.log(`weather API: ${error}`))\r\n}\r\n\r\nexport default getWeatherByLocation;","import React from \"react\";\r\n\r\nimport City from \"./main components/City\";\r\nimport Temp from \"./main components/Temp\";\r\nimport Extra from \"./main components/Extra\";\r\n\r\nimport getLocationByCity from \"../../api/geocodeApi\";\r\nimport getWeatherByLocation from \"../../api/weatherApi\";\r\n\r\nclass WeatherInfo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.location = getLocationByCity();\r\n    this.state = {\r\n      weatherData: {}\r\n    }\r\n  }\r\n  \r\n  async getWeatherData() {\r\n    const weatherData = await getWeatherByLocation(this.location);\r\n    this.setState({\r\n      weatherData\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getWeatherData();\r\n  }\r\n\r\n  render() {\r\n    const {location, temp, extra} = this.state.weatherData;\r\n    return (\r\n      <>\r\n        <City name = { location }></City>\r\n        <Temp { ...temp }></Temp>\r\n        <Extra { ...extra }></Extra>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherInfo;","import React from \"react\";\r\nimport \"./index.sass\";\r\n\r\nimport WeatherInfo from \"./render-weather-info\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <main>\r\n      <h3 className=\"title\">current weather</h3>\r\n      <WeatherInfo />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"./index.sass\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"about\">\r\n      <span className=\"about_author\">ⒸLike-ran</span>\r\n      <div className=\"about_links\">\r\n        <a className=\"links_icon\" href=\"https://www.facebook.com/maksym.cherniaiev.9\">\r\n          <i className=\"fab fa-facebook-square\"></i>\r\n        </a>\r\n        <a className=\"links_icon\" href=\"https://www.linkedin.com/in/maksym-cherniaiev-382885174/\">\r\n          <i className=\"fab fa-linkedin\"></i>\r\n        </a>\r\n        <a className=\"links_icon\" href=\"https://github.com/Maksym-Cherniaiev\">\r\n          <i className=\"fab fa-github-square\"></i>\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport \"./App.sass\";\nimport Header from \"./components/Header/index.js\";\nimport Main from \"./components/Main/index.js\";\nimport Footer from \"./components/Footer/index.js\";\n\nfunction App() {\n  return (\n    <>\n      <Header></Header>\n      <Main></Main>\n      <Footer></Footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}