{"version":3,"sources":["components/Header/index.js","components/Main/main components/Search.js","components/Main/main components/City.js","components/Main/main components/Temp.js","components/Main/main components/Extra.js","api/currentPosition.js","api/geocodeApi.js","api/weatherApi.js","components/Main/render-Main-components.js","components/Main/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","SearchByCity","getValue","event","undefined","key","_this","props","onSearchChange","target","value","Fragment","onKeyDown","this","type","placeholder","Component","City","_ref","name","icon","alt","toUpperCase","upperCity","src","Temp","temp_c","temp_f","Extra","humidity","condition","pressure","getUserLocation","Promise","res","rej","navigator","geolocation","getCurrentPosition","then","position","_position$coords","coords","lat","latitude","lng","longitude","catch","err","console","log","getLocationByCityName","userValue","axios","get","concat","result","data","totalResultsCount","_result$data$geonames","geonames","URL","apiKey","getWeatherByLocation","location","weatherData","_data$data$current","current","pressure_mb","substring","temp","extra","text","error","WeatherInfo","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","heandleSearchValue","searchTerm","setState","getWeatherData","state","length","cityLocation","checkUserValue","_this$state$weatherDa","Search","main_components_City","main_components_Temp","main_components_Extra","React","Main","render_Main_components","Footer","href","App","components_Header","components_Main","components_Footer","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b79180b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./index.sass\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"head-container\">\r\n      <h1 className=\"head_bar-title\">WEATHER APP</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\n\r\nclass SearchByCity extends Component {\r\n  getValue = event => {\r\n    if (event !== undefined) {\r\n      if (event.key === \"Enter\") {\r\n        this.props.onSearchChange(event.target.value);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <section className=\"bar\">\r\n          <input className=\"bar_search\" onKeyDown={ this.getValue } type=\"text\" placeholder=\"Enter a city\"></input>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchByCity;","import React from \"react\";\r\n\r\nfunction upperCity(name) {\r\n  if (typeof name === \"string\") {\r\n    return name.toUpperCase();\r\n  }\r\n}\r\n\r\nfunction City( {name, icon, alt} ) {\r\n  return (\r\n    <>\r\n      <h3 className=\"title\">current weather in location</h3>\r\n      <h2>{ upperCity(name) }</h2>\r\n      <div className=\"weather-icon\">\r\n        <img className=\"weather-icon_image\" src={ icon } alt={ alt }></img>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default City;","import React from \"react\";\r\n\r\nfunction Temp( {temp_c, temp_f} ) {\r\n  return (\r\n    <section className=\"temp\">\r\n      <span className=\"temp_current\">tempereture C: { temp_c }</span>\r\n      <span className=\"temp_feel\">tempereture F: { temp_f }</span>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Temp;","import React from \"react\";\r\n\r\nfunction Extra( {humidity, condition, pressure} ) {\r\n  return (\r\n    <section className=\"extra\">\r\n      <span className=\"extra_humidity\">humidity: { humidity }</span>\r\n      <hr></hr>\r\n      <span className=\"extra_visibility\">condition: { condition }</span>\r\n      <hr></hr>\r\n      <span className=\"extra_pressure\">pressure: { pressure }</span>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Extra;","function getCurrentLocation() {\r\n  return new Promise((res, rej) => {\r\n    navigator.geolocation.getCurrentPosition(res, rej);\r\n  })\r\n}\r\n\r\nfunction getUserLocation() {\r\n return getCurrentLocation()\r\n .then(position => {\r\n   let location = {};\r\n   const {latitude: lat, longitude: lng} = position.coords;\r\n   location = {\r\n     lat,\r\n     lng\r\n   }\r\n   return location;\r\n })\r\n .catch(err => console.log(err))\r\n}\r\n\r\nexport default getUserLocation;","import axios from \"axios\";\r\n\r\nfunction getLocationByCityName(userValue) {\r\n  let location = {};\r\n  return axios.get(`http://api.geonames.org/searchJSON?q=${userValue}&maxRows=1&username=likeran&featureClass=P`)\r\n  .then(result => {\r\n    if (result.data.totalResultsCount === 0) {\r\n      return location = \"there is no such city in our database\";\r\n    }\r\n    const {lat, lng} = result.data.geonames[0];\r\n    location = {\r\n      lat,\r\n      lng\r\n    }\r\n    return location;\r\n  })\r\n}\r\n\r\nexport default getLocationByCityName;","import axios from \"axios\";\r\n\r\nconst URL = \"https://api.apixu.com/v1/current.json\";\r\nconst apiKey = \"2d7ebdd87bcf48e9b7f184126192507\";\r\n\r\nfunction getWeatherByLocation(location) {\r\n  let weatherData = {};\r\n  return axios.get(`${URL}?key=${apiKey}&q=${location.lat},${location.lng}`)\r\n  .then(data => {\r\n    const {name} = data.data.location;\r\n    const {temp_c, temp_f, humidity, pressure_mb: pressure, condition} = data.data.current;\r\n    weatherData.location = {\r\n      name,\r\n      icon: condition.icon,\r\n      alt: `current ${condition.icon.substring(16, 23)} in ${name}`\r\n    }\r\n    weatherData.temp = {\r\n      temp_c,\r\n      temp_f\r\n    };\r\n    weatherData.extra = {\r\n      humidity,\r\n      pressure,\r\n      condition: condition.text\r\n    }\r\n    return weatherData;\r\n  })\r\n  .catch(error => console.log(`weather API: ${error}`))\r\n}\r\n\r\nexport default getWeatherByLocation;","import React from \"react\";\r\n\r\nimport Search from \"./main components/Search\";\r\nimport City from \"./main components/City\";\r\nimport Temp from \"./main components/Temp\";\r\nimport Extra from \"./main components/Extra\";\r\n\r\nimport getUserLocation from \"../../api/currentPosition\";\r\nimport getLocationByCityName from \"../../api/geocodeApi\";\r\nimport getWeatherByLocation from \"../../api/weatherApi\";\r\n\r\nclass WeatherInfo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      weatherData: {},\r\n      searchTerm: \"\"\r\n    }\r\n  }\r\n\r\n  heandleSearchValue = searchTerm => {\r\n    this.setState({\r\n      searchTerm\r\n    }, this.getWeatherData);\r\n  }\r\n\r\n  async checkUserValue() {\r\n    let cityLocation;\r\n    if (this.state.searchTerm.length > 0) {\r\n      cityLocation = await getLocationByCityName(this.state.searchTerm);\r\n    } else if (this.state.searchTerm === \"\") {\r\n      cityLocation = await getUserLocation();\r\n    }\r\n    return cityLocation;\r\n  }\r\n\r\n  async getWeatherData() {\r\n    const data = await this.checkUserValue();\r\n    if (typeof data === \"string\") {\r\n      this.setState({\r\n        weatherData: {\r\n          location: {\r\n            name: data\r\n          }\r\n        } \r\n      });\r\n    } else if (typeof data === \"object\") {\r\n      const weatherData = await getWeatherByLocation(data);\r\n      this.setState({\r\n        weatherData\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getWeatherData();\r\n  }\r\n\r\n  render() {\r\n    const {location, temp, extra} = this.state.weatherData;\r\n    return (\r\n      <>\r\n        <Search onSearchChange = { this.heandleSearchValue }></Search>\r\n        <City { ...location }></City>\r\n        <Temp { ...temp }></Temp>\r\n        <Extra { ...extra }></Extra>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherInfo;","import React from \"react\";\r\nimport \"./index.sass\";\r\n\r\nimport WeatherInfo from \"./render-Main-components\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <main>\r\n      <WeatherInfo />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"./index.sass\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"about\">\r\n      <span className=\"about_author\">ⒸLike-ran</span>\r\n      <div className=\"about_links\">\r\n        <a className=\"links_icon\" href=\"https://www.facebook.com/maksym.cherniaiev.9\">\r\n          <i className=\"fab fa-facebook-square\"></i>\r\n        </a>\r\n        <a className=\"links_icon\" href=\"https://www.linkedin.com/in/maksym-cherniaiev-382885174/\">\r\n          <i className=\"fab fa-linkedin\"></i>\r\n        </a>\r\n        <a className=\"links_icon\" href=\"https://github.com/Maksym-Cherniaiev\">\r\n          <i className=\"fab fa-github-square\"></i>\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport \"./App.sass\";\nimport Header from \"./components/Header/index.js\";\nimport Main from \"./components/Main/index.js\";\nimport Footer from \"./components/Footer/index.js\";\n\nfunction App() {\n  return (\n    <>\n      <Header></Header>\n      <Main></Main>\n      <Footer></Footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}